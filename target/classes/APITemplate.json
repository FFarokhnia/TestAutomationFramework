{
  "api_tests": {
    "user_management": {
      "POST": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Create a user with valid data",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "John Doe",
              "email": "john.doe@example.com"
            },
            "expected_status": 201,
            "expected_response_body": {
              "message": "User created successfully",
              "user_id": "string"
            }
          },
          {
            "test_type": "negative",
            "description": "POST with missing email",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "John Doe"
            },
            "expected_status": 400,
            "expected_error_message": "Email is required"
          },
          {
            "test_type": "negative",
            "description": "POST with invalid email format",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "John Doe",
              "email": "invalid_email_format"
            },
            "expected_status": 422,
            "expected_error_message": "Email format is invalid"
          },
          {
            "test_type": "negative",
            "description": "POST with duplicate email",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "John Doe",
              "email": "duplicate@example.com"
            },
            "expected_status": 409,
            "expected_error_message": "Email already exists"
          }
        ]
      },
      "GET": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Get user by valid ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 200,
            "expected_response_body": {
              "user_id": "string",
              "name": "string",
              "email": "string"
            }
          },
          {
            "test_type": "negative",
            "description": "GET with invalid user ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 404,
            "expected_error_message": "User not found"
          },
          {
            "test_type": "negative",
            "description": "GET user without authorization",
            "expected_status": 401,
            "expected_error_message": "Unauthorized access"
          }
        ]
      },
      "PATCH": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Update user with valid data",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "John Doe Updated",
              "email": "john.doe@example.com"
            },
            "expected_status": 200,
            "expected_response_body": {
              "message": "User updated successfully"
            }
          },
          {
            "test_type": "negative",
            "description": "PATCH with missing user ID",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "John Doe Updated"
            },
            "expected_status": 400,
            "expected_error_message": "User ID is required"
          },
          {
            "test_type": "negative",
            "description": "PATCH with invalid user ID",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "user_id": "invalid_id",
              "name": "John Doe Updated"
            },
            "expected_status": 404,
            "expected_error_message": "User not found"
          }
        ]
      },
      "DELETE": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Delete user with valid ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 204
          },
          {
            "test_type": "negative",
            "description": "DELETE with invalid user ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 404,
            "expected_error_message": "User not found"
          },
          {
            "test_type": "negative",
            "description": "DELETE without authorization",
            "expected_status": 401,
            "expected_error_message": "Unauthorized access"
          }
        ]
      }
    },

    "product_management": {
      "POST": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Create a product with valid data",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "Product A",
              "price": 19.99
            },
            "expected_status": 201,
            "expected_response_body": {
              "message": "Product created successfully",
              "product_id": "string"
            }
          },
          {
            "test_type": "negative",
            "description": "POST with missing price",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "Product A"
            },
            "expected_status": 400,
            "expected_error_message": "Price is required"
          },
          {
            "test_type": "negative",
            "description": "POST with duplicate product name",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "Product A",
              "price": 19.99
            },
            "expected_status": 409,
            "expected_error_message": "Product already exists"
          }
        ]
      },
      "GET": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Get product by valid ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 200,
            "expected_response_body": {
              "product_id": "string",
              "name": "string",
              "price": "number"
            }
          },
          {
            "test_type": "negative",
            "description": "GET with invalid product ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 404,
            "expected_error_message": "Product not found"
          },
          {
            "test_type": "negative",
            "description": "GET product without authorization",
            "expected_status": 401,
            "expected_error_message": "Unauthorized access"
          }
        ]
      },
      "PATCH": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Update product with valid data",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "Product A Updated",
              "price": 29.99
            },
            "expected_status": 200,
            "expected_response_body": {
              "message": "Product updated successfully"
            }
          },
          {
            "test_type": "negative",
            "description": "PATCH with missing product ID",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "name": "Product A Updated"
            },
            "expected_status": 400,
            "expected_error_message": "Product ID is required"
          },
          {
            "test_type": "negative",
            "description": "PATCH with invalid product ID",
            "headers": {
              "Authorization": "Bearer valid_token",
              "Content-Type": "application/json"
            },
            "request_body": {
              "product_id": "invalid_id",
              "name": "Product A Updated"
            },
            "expected_status": 404,
            "expected_error_message": "Product not found"
          }
        ]
      },
      "DELETE": {
        "test_cases": [
          {
            "test_type": "positive",
            "description": "Delete product with valid ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 204
          },
          {
            "test_type": "negative",
            "description": "DELETE with invalid product ID",
            "headers": {
              "Authorization": "Bearer valid_token"
            },
            "expected_status": 404,
            "expected_error_message": "Product not found"
          },
          {
            "test_type": "negative",
            "description": "DELETE without authorization",
            "expected_status": 401,
            "expected_error_message": "Unauthorized access"
          }
        ]
      }
    }
  }
}
